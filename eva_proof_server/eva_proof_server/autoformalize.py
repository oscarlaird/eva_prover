from eva_proof_server import cursor

INSTRUCTIONS = """
You are an expert in the Lean 3 Mathematical Language.
Your job is to prove the formal statement of a problem stated in natural language mathematics.
You are given a few examples of formalizations of similar problems.
You are also given the informal statement of the problem. You must output the formalization in Lean 3.
Do things slightly differently than the examples:
1. Use forall to bring all variables and hypotheses into scope. (i.e. revert_all). (make sure all variables are quantified)
2. Do not include the trailing :=
3. Return ONLY the formal statement, nothing else. DO NOT OUTPUT ANY ENGLISH TEXT OR REPEAT THE INFORMAL STATEMENT.
   DO NOT OUTPUT THE LINE FORMAL STATEMENT.
"""

def autoformalize(nl_problem):
    """
    Automatically generates a formal proof for a given natural language problem.

    Args:
        nl_problem (str): The natural language problem to be formalized.

    Returns:
        str: The formal statement generated by OpenAI's GPT-3 language model.
    """

    relevant_examples = cursor.query(f"""
    SELECT informal_statement, formal_statement FROM problems
    JOIN formal_proofs ON problems.problem_name = formal_proofs.problem_name
    ORDER BY Similarity(EmbedText("{nl_problem}"), EmbedText(informal_statement))
    """).df()[:3]
    few_shot_prompt = 'Examples\n\n' + '\n\n'.join([f'Informal Statement\n{row["problems.informal_statement"]}\nFormal Statement\n{row["formal_proofs.formal_statement"]}\n' for _, row in relevant_examples.iterrows()])
    # escape quotes
    nl_problem = nl_problem.replace('"', '')
    few_shot_prompt = few_shot_prompt.replace('"', '')
    query_string = f"""
    SELECT OpenAIChatCompletion(
        "{'Informal Statement: ' + nl_problem + 'Formal Statement: [YOUR ANSWER GOES HERE]'}",
        "",
        "{INSTRUCTIONS + few_shot_prompt}"
        )
    """
    print(query_string)
    response = cursor.query(query_string).df()
    return response.iloc[0]['openaichatcompletion.response']